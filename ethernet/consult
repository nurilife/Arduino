// #include <EtherCard.h>
 
// //0은 DHCP, 1은 Static으로 설정
// #define STATIC 0  // set to 1 to disable DHCP (adjust myip/gwip values below)
 
// //Static IP 일 경우 설정
// #if STATIC
// // ethernet interface ip address
// static byte myip[] = { 192,168,0,6 };
// // gateway ip address
// static byte gwip[] = { 192,168,0,1 };
// #endif
 
// // ethernet mac address - must be unique on your network
// static byte mymac[] = { 0x74,0x69,0x69,0x2D,0x30,0x31 };
 
// byte Ethernet::buffer[500]; // tcp/ip send and receive buffer
 
// //요청이 왔을 경우 뿌려줄 HTML 소스
// const char page[] PROGMEM =
// "HTTP/1.0 503 Service Unavailable\r\n"
// "Content-Type: text/html\r\n"
// "Retry-After: 600\r\n"
// "\r\n"
// "<html>"
//   "<head><title>"
//     "Ethernet Module Test_EDUINO"
//   "</title></head>"
//   "<body>"
//     "<h3>Eduino Ethernet Module Test</h3>"
//     "<p><em>"
//       "Let's Play With Arduino<br />"
//     "</em></p>"
//   "</body>"
// "</html>"
// ;
 
// void setup(){
//   Serial.begin(57600);
//   Serial.println("\n[backSoon]");
  
//   if (ether.begin(sizeof Ethernet::buffer, mymac) == 0) 
//     Serial.println( "Failed to access Ethernet controller");
// #if STATIC
//   ether.staticSetup(myip, gwip);
// #else
//   if (!ether.dhcpSetup())
//     Serial.println("DHCP failed");
// #endif
 
//   ether.printIp("IP:  ", ether.myip);
//   ether.printIp("GW:  ", ether.gwip);  
//   ether.printIp("DNS: ", ether.dnsip);  
// }
// #define STATIC 0  // set to 1 to disable DHCP (adjust myip/gwip values below) 
// void loop(){
//   //웹브라우저의 요청이 들어왔을 경우 page 의 내용을 보내줌
//   // wait for an incoming TCP packet, but ignore its contents
//   if (ether.packetLoop(ether.packetReceive())) {
//     memcpy_P(ether.tcpOffset(), page, sizeof page);
//     ether.httpServerReply(sizeof page - 1);
//   }
// }

#include <EtherCard.h>
#include <DHT.h>

#define DHTPIN 4 // pino que estamos conectado
#define DHTTYPE DHT11 // DHT 11
DHT dht(DHTPIN, DHTTYPE);

// Ethernet interface ip address
static byte myip[] = { 192, 168, 0, 6 };
// Gateway ip address
static byte gwip[] = { 192, 168, 0, 1 };
// DNS ip address
static byte dnsip[] = { 192, 168, 0, 240 };
// Subnet mask
static byte mask[] = { 255, 255, 255, 0 };

// Ethernet mac address - must be unique on your network
static byte mymac[] = { 0x74, 0x69, 0x69, 0x2D, 0x30, 0x31 };

// TCP/IP send and receive buffer
byte Ethernet::buffer[1000];

BufferFiller bfill;

const char okHeader[] PROGMEM =
  "HTTP/1.0 200 OK\r\n"
  "Content-Type: application/json\r\n"
  "Pragma: no-cache\r\n"
  "\r\n" ;

const char failHeader[] PROGMEM =
  "HTTP/1.0 404 Not Found\r\n"
  "Content-Type: text/html\r\n"
  "Access-Control-Allow-Origin: *\r\n"
  "Pragma: no-cache\r\n"
  "\r\n" ;

const char responseHeader[] PROGMEM =
  "HTTP/1.1 200 OK\r\n"
  "Content-Type: application/json\r\n"
  "Access-Control-Allow-Origin: *\r\n"
  "\r\n" ;

int tipo_requisicao = 0;

void setup() {
  // Open a serial connection for debugging
  Serial.begin(57600);
  Serial.println("\n[Debugger]");

  // Initialize the Ethernet interface
  if (ether.begin(sizeof Ethernet::buffer, mymac) == 0)
    Serial.println( "Failed to access Ethernet controller");

  // Setup IP statically
  ether.staticSetup(myip, gwip, dnsip, mask);

  // Print IP information out to serial line
  ether.printIp("IP:  ", ether.myip);
  ether.printIp("GW:  ", ether.gwip);
  ether.printIp("DNS: ", ether.dnsip);

  dht.begin();
}

static word homePage() {
  bfill = ether.tcpOffset();
  if (tipo_requisicao == 1) {

    float t = dht.readTemperature();
    char json_temp[50];
    String json_str_temp = "{ \"temperatura\": " + String(t) + "}";
    json_str_temp.toCharArray(json_temp, 50) ;
    
   bfill.emit_p(PSTR("$S"), json_temp, responseHeader);
    return bfill.position();
  }
  else if (tipo_requisicao == 2) {
    
    float h = dht.readHumidity();
    char json_humi[50];
    String json_str_humi = "{ \"humidade\": " + String(h) + "}";
    json_str_humi.toCharArray(json_humi, 50) ;
    
    bfill.emit_p(PSTR("$S"), json_humi, responseHeader);
    return bfill.position();
  }
  else {
    bfill.emit_p(PSTR("Pagina nao encontrada"), failHeader);
    return bfill.position();
  }

}

void WebServer() {
  word len = ether.packetReceive();
  word pos = ether.packetLoop(len);

  if (strstr((char *)Ethernet::buffer + pos, "GET /DHT11/TEMPERATURA") != 0) {
    tipo_requisicao = 1;
  }
  else if (strstr((char *)Ethernet::buffer + pos, "GET /DHT11/HUMIDADE") != 0) {
    tipo_requisicao = 2;
  }
  else {
    tipo_requisicao = 0;
  }

  if (pos)
  {
    ether.httpServerReply(homePage());
  }
}

void loop() {
  WebServer();
}

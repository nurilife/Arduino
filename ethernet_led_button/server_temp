/*
 * DHT11 WebServer sketch
 * Send temperature and humidity

 A simple web server that shows the value of the analog input pins.
  using an Arduino Wiznet Ethernet shield.

A simple web server that shows the value of the analog input pins.
  Circuit:
 * Ethernet shield attached to pins 10, 11, 12, 13
 * Analog inputs attached to pins A0 through A5 (optional)

 created 18 Dec 2009
 by David A. Mellis
  modified 9 Apr 2012
  by Tom Igoe
  modified 02 Sept 2015
  by Arturo Guadalupi

*/

#include <SPI.h>
#include <Ethernet.h>
#include <DHT.h>

#define DHTTYPE DHT11
#define DHTPIN 4
DHT dht(DHTPIN, DHTTYPE);

// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = {  0x74, 0x69, 0x69, 0x2D, 0x30, 0x31 };
IPAddress ip(192, 168, 0, 6);
//dht DHT;
float temperature = 0.0;
int humidity = 0.0;
long lastReadingTime = 0;

// Initialize the Ethernet server library
// with the IP address and port you want to use
// (port 80 is default for HTTP):
EthernetServer server(80);

void setup() {
  dht.begin();
	// start the SPI library:
	SPI.begin();
    Serial.println("DHT11 WebServer sketch");
	// Open serial communications and wait for port to open:
	Serial.begin(9600);
    // start the Ethernet connection and the server:
    Ethernet.begin(mac, ip);
	server.begin();
	Serial.print("server is at ");
	Serial.println(Ethernet.localIP());
}

void loop() {
	// check for a reading no more than once a second.
	if (millis() - lastReadingTime > 3000) {
		getData();
		// timestamp the last time you got a reading:
		lastReadingTime = millis();
	}

	// listen for incoming Ethernet connections:
	listenForEthernetClients();
}

void getData() {
	Serial.println("Getting reading");
  temperature = (float)(dht.readTemperature());
	humidity = (float)(dht.readHumidity());

	if(temperature > -100) {
		//Read the temperature data
		// convert the temperature to celsius and display it:

		Serial.print("Temperature: ");
		Serial.print(temperature);
		Serial.println(" degrees C");
		Serial.print("Humidity: " + String(humidity));
		Serial.println(" %");
	}
}

void listenForEthernetClients() {
	// listen for incoming clients
	EthernetClient client = server.available();
	if (client) {
		Serial.println("new client");
		// an http request ends with a blank line
		boolean currentLineIsBlank = true;
		while (client.connected()) {
			if (client.available()) {
				char c = client.read();
				//Serial.write(c);
				// if you've gotten to the end of the line (received a newline
				// character) and the line is blank, the http request has ended,
				// so you can send a reply
				if (c == '\n' && currentLineIsBlank) {
					// send a standard http response header
					client.println("HTTP/1.1 200 OK");
					client.println("Content-Type: text/html");
					client.println("Connection: close");  // the connection will be closed after completion of the response
					client.println("Refresh: 3");  // refresh the page automatically every 5 sec
					client.println();
					client.println("<!DOCTYPE HTML>");
					client.println("<html>");
					// print the current readings, in HTML format:
					client.print("Temperature: ");
					client.print(temperature);
					client.print(" degrees C");
					client.println("<br />");
					client.print("Humidity: ");
					client.print(humidity);
					client.print(" %");
					client.println("<br />");
				    client.println("</html>");
				    break;
			    }
			    if (c == '\n') {
				    // you're starting a new line
				    currentLineIsBlank = true;
			    } else if (c != '\r') {
				    // you've gotten a character on the current line
				    currentLineIsBlank = false;
			    }
		    }
	    }
		// give the web browser time to receive the data
		delay(1);
		// close the connection:
		client.stop();
		Serial.println("client disconnected");
	}
}
